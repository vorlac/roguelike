cmake_minimum_required (VERSION 3.22)

set(binary_resource_dir "${CMAKE_CURRENT_BINARY_DIR}/resources")
file(MAKE_DIRECTORY "${binary_resource_dir}")

set(fonts_cpp "${binary_resource_dir}/fonts.cpp")
set(fonts_hpp "${binary_resource_dir}/fonts.hpp")
set(shaders_hpp "${binary_resource_dir}/shaders.hpp")

file(GLOB
  roguelike_font_resources
  CONFIGURE_DEPENDS
    "${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/*.ttf"
)

file(GLOB
  roguelike_shader_resources
  CONFIGURE_DEPENDS
    "${CMAKE_CURRENT_SOURCE_DIR}/src/graphics/gl/shaders/*.glsl"
)

# Concatenate resource files
# into a comma separated string
string(REGEX REPLACE
  "([^\\]|^);" "\\1,"
  font_resources_string
  "${roguelike_font_resources}"
)

string(REGEX REPLACE
  "[\\](.)" "\\1"
  font_resources_string
  "${font_resources_string}"
)

string(REPLACE
    "," ";"
  fonts_list
    ${font_resources_string}
)

# Create hpp/cpp resource files of binary data
file(WRITE
  ${fonts_cpp}
    "/* Autogenerated by bin2c */\n\n"
    "#include <stdint.h>\n\n"
)

file(WRITE
  ${fonts_hpp}
    "#pragma once\n"
    "#include <stdint.h>\n\n"
)

file(WRITE
  ${shaders_hpp}
    "#pragma once\n\n"
)

# for each binary file:
# 1. Get filename
# 2. Replace filename spaces & extension separator for C compatibility
# 3. Convert to lower case
# 4. Read hex data from file
# 5. Convert hex data for C compatibility
# 6. Append data to c file
# 7. Append extern definitions to h file

message("\n\n===== ${PROJECT_NAME} resources =====")

# fonts
message("\nPacking fonts hexdump into ${fonts_cpp}:")
foreach(bin ${fonts_list})
  string(REGEX MATCH "([^/]+)$" filename ${bin})
  message("> resources/${filename}")

  string(REGEX REPLACE "\\.| |-" "_" filename ${filename})
  string(TOLOWER ${filename} filename)
  file(READ ${bin} filedata HEX)
  string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata "${filedata}")

  file(APPEND ${fonts_cpp} "extern uint8_t ${filename}[] = {${filedata}0x00};\n")
  file(APPEND ${fonts_cpp} "uint32_t ${filename}_size = sizeof(${filename}) - 1;\n\n")
  file(APPEND ${fonts_hpp} "extern uint8_t ${filename}[];\n")
  file(APPEND ${fonts_hpp} "extern uint32_t ${filename}_size;\n\n")
endforeach()

# shaders
message("\nPacking fonts hexdump into ${shaders_hpp}:")
foreach(bin ${roguelike_shader_resources})
  string(REGEX MATCH "([^/]+)$" filename ${bin})
  message("> resources/${filename}")

  string(REGEX REPLACE "\\.| |-" "_" filename ${filename})
  file(READ ${bin} filedata HEX)
  string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata ${filedata})
  file(APPEND ${shaders_hpp} "const unsigned char ${filename}[] = {${filedata}};\n\n")
  file(APPEND ${shaders_hpp} "const unsigned ${filename}_size = sizeof(${filename});\n\n")
endforeach()
